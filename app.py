#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Dashboard interativo para visualiza√ß√£o de previs√µes macroecon√¥micas do Brasil:
- IPCA (infla√ß√£o)
- Taxa Selic
- PIB
- C√¢mbio (USD/BRL)

O dashboard permite visualizar dados hist√≥ricos e previs√µes futuras
para os pr√≥ximos 6-12 meses, com intervalos de confian√ßa.
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import pickle
from PIL import Image
import warnings

# Ignorar avisos
warnings.filterwarnings('ignore')

# Diret√≥rios
DATA_DIR = 'data'
MODELS_DIR = 'models'
FORECAST_DIR = 'forecasts'
ASSETS_DIR = 'assets'

# Criar diret√≥rio de assets se n√£o existir
if not os.path.exists(ASSETS_DIR):
    os.makedirs(ASSETS_DIR)

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Dashboard de Previs√µes Macroecon√¥micas do Brasil",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para carregar dados
@st.cache_data(ttl=3600*24)  # Cache por 24 horas
def load_data():
    """
    Carrega os dados hist√≥ricos e previs√µes.
    """
    data = {}
    indicators = ['ipca', 'selic', 'pib', 'cambio']
    
    for indicator in indicators:
        # Carregar dados hist√≥ricos
        hist_file = os.path.join(DATA_DIR, f'{indicator}.csv')
        if os.path.exists(hist_file):
            df = pd.read_csv(hist_file, index_col=0, parse_dates=True)
            
            # Carregar previs√µes
            forecast_file = os.path.join(FORECAST_DIR, f'{indicator}_forecast.csv')
            if os.path.exists(forecast_file):
                forecast_df = pd.read_csv(forecast_file, index_col=0, parse_dates=True)
                
                # Combinar dados hist√≥ricos e previs√µes
                data[indicator] = {
                    'historical': df,
                    'forecast': forecast_df
                }
            else:
                data[indicator] = {
                    'historical': df,
                    'forecast': None
                }
        else:
            st.error(f"Arquivo de dados hist√≥ricos para {indicator} n√£o encontrado.")
    
    return data

# Fun√ß√£o para carregar m√©tricas dos modelos
@st.cache_data(ttl=3600*24)  # Cache por 24 horas
def load_model_metrics():
    """
    Carrega as m√©tricas de avalia√ß√£o dos modelos.
    """
    metrics = {}
    indicators = ['ipca', 'selic', 'pib', 'cambio']
    model_types = ['arima', 'prophet', 'rf', 'xgb']
    
    for indicator in indicators:
        metrics[indicator] = {}
        for model_type in model_types:
            metrics_file = os.path.join(MODELS_DIR, f'{model_type}_{indicator}_metrics.csv')
            if os.path.exists(metrics_file):
                df = pd.read_csv(metrics_file)
                metrics[indicator][model_type] = df
    
    return metrics

# Fun√ß√£o para criar gr√°fico de dados hist√≥ricos e previs√µes
def plot_forecast(data, indicator, models=None, confidence_interval=True):
    """
    Cria um gr√°fico interativo com dados hist√≥ricos e previs√µes.
    
    Args:
        data: Dicion√°rio com dados hist√≥ricos e previs√µes
        indicator: Nome do indicador
        models: Lista de modelos para exibir (None para todos)
        confidence_interval: Se deve exibir intervalo de confian√ßa
    """
    if models is None:
        models = ['arima', 'prophet', 'rf', 'xgb', 'ensemble']
    
    # Preparar dados
    historical = data[indicator]['historical']
    forecast = data[indicator]['forecast']
    
    # Criar figura
    fig = go.Figure()
    
    # Adicionar dados hist√≥ricos
    fig.add_trace(go.Scatter(
        x=historical.index,
        y=historical[indicator],
        mode='lines',
        name='Hist√≥rico',
        line=dict(color='black', width=2)
    ))
    
    # Adicionar previs√µes
    colors = {
        'arima': 'blue',
        'prophet': 'red',
        'rf': 'green',
        'xgb': 'purple',
        'ensemble': 'orange'
    }
    
    model_names = {
        'arima': 'ARIMA',
        'prophet': 'Prophet',
        'rf': 'Random Forest',
        'xgb': 'XGBoost',
        'ensemble': 'Ensemble (m√©dia)'
    }
    
    for model in models:
        if model in forecast.columns:
            fig.add_trace(go.Scatter(
                x=forecast.index,
                y=forecast[model],
                mode='lines',
                name=model_names.get(model, model),
                line=dict(color=colors.get(model, 'gray'), width=2, dash='dash')
            ))
    
    # Adicionar intervalo de confian√ßa
    if confidence_interval and 'prophet_lower' in forecast.columns and 'prophet_upper' in forecast.columns:
        fig.add_trace(go.Scatter(
            x=forecast.index,
            y=forecast['prophet_upper'],
            mode='lines',
            name='Limite Superior',
            line=dict(width=0),
            showlegend=False
        ))
        
        fig.add_trace(go.Scatter(
            x=forecast.index,
            y=forecast['prophet_lower'],
            mode='lines',
            name='Intervalo de Confian√ßa',
            line=dict(width=0),
            fill='tonexty',
            fillcolor='rgba(173, 216, 230, 0.3)'
        ))
    
    # Configurar layout
    title_map = {
        'ipca': 'IPCA (Infla√ß√£o)',
        'selic': 'Taxa Selic',
        'pib': 'PIB (R$ milh√µes)',
        'cambio': 'C√¢mbio (USD/BRL)'
    }
    
    fig.update_layout(
        title=f"{title_map.get(indicator, indicator.upper())} - Hist√≥rico e Previs√£o",
        xaxis_title="Data",
        yaxis_title=title_map.get(indicator, indicator.upper()),
        hovermode="x unified",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        template="plotly_white"
    )
    
    return fig

# Fun√ß√£o para criar tabela de m√©tricas
def create_metrics_table(metrics, indicator):
    """
    Cria uma tabela com as m√©tricas de avalia√ß√£o dos modelos.
    
    Args:
        metrics: Dicion√°rio com m√©tricas dos modelos
        indicator: Nome do indicador
    """
    if indicator not in metrics:
        return None
    
    # Criar DataFrame para a tabela
    table_data = []
    model_names = {
        'arima': 'ARIMA',
        'prophet': 'Prophet',
        'rf': 'Random Forest',
        'xgb': 'XGBoost'
    }
    
    for model_type, df in metrics[indicator].items():
        if not df.empty:
            row = {
                'Modelo': model_names.get(model_type, model_type),
                'RMSE': df['rmse'].values[0],
                'MAE': df['mae'].values[0],
                'R¬≤': df['r2'].values[0]
            }
            table_data.append(row)
    
    if table_data:
        return pd.DataFrame(table_data)
    else:
        return None

# Fun√ß√£o para exportar dados
def export_data(data, indicator, format='csv'):
    """
    Exporta dados hist√≥ricos e previs√µes para CSV ou Excel.
    
    Args:
        data: Dicion√°rio com dados hist√≥ricos e previs√µes
        indicator: Nome do indicador
        format: Formato de exporta√ß√£o ('csv' ou 'excel')
    
    Returns:
        Caminho do arquivo exportado
    """
    # Combinar dados hist√≥ricos e previs√µes
    historical = data[indicator]['historical'].copy()
    forecast = data[indicator]['forecast'].copy()
    
    # Renomear colunas do hist√≥rico
    historical.columns = [f'{col}_historico' for col in historical.columns]
    
    # Criar DataFrame combinado
    combined = pd.concat([historical, forecast], axis=1)
    
    # Exportar
    export_dir = os.path.join(ASSETS_DIR, 'exports')
    if not os.path.exists(export_dir):
        os.makedirs(export_dir)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    if format == 'csv':
        filename = os.path.join(export_dir, f'{indicator}_dados_e_previsoes_{timestamp}.csv')
        combined.to_csv(filename)
    else:  # excel
        filename = os.path.join(export_dir, f'{indicator}_dados_e_previsoes_{timestamp}.xlsx')
        combined.to_excel(filename)
    
    return filename

# Fun√ß√£o para gerar relat√≥rio
def generate_report(data, indicator, selected_models):
    """
    Gera um relat√≥rio em HTML com an√°lise dos dados e previs√µes.
    
    Args:
        data: Dicion√°rio com dados hist√≥ricos e previs√µes
        indicator: Nome do indicador
        selected_models: Lista de modelos selecionados
    
    Returns:
        Caminho do arquivo de relat√≥rio
    """
    # Preparar dados
    historical = data[indicator]['historical']
    forecast = data[indicator]['forecast']
    
    # Criar diret√≥rio para relat√≥rios
    report_dir = os.path.join(ASSETS_DIR, 'reports')
    if not os.path.exists(report_dir):
        os.makedirs(report_dir)
    
    # Nome do arquivo
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = os.path.join(report_dir, f'{indicator}_relatorio_{timestamp}.html')
    
    # Mapear nomes dos indicadores
    indicator_names = {
        'ipca': 'IPCA (Infla√ß√£o)',
        'selic': 'Taxa Selic',
        'pib': 'PIB',
        'cambio': 'C√¢mbio (USD/BRL)'
    }
    
    # Mapear nomes dos modelos
    model_names = {
        'arima': 'ARIMA',
        'prophet': 'Prophet',
        'rf': 'Random Forest',
        'xgb': 'XGBoost',
        'ensemble': 'Ensemble (m√©dia)'
    }
    
    # Criar conte√∫do HTML
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Relat√≥rio de Previs√µes - {indicator_names.get(indicator, indicator.upper())}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1, h2, h3 {{ color: #2c3e50; }}
            table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            tr:nth-child(even) {{ background-color: #f9f9f9; }}
            .container {{ margin-bottom: 30px; }}
            .footer {{ margin-top: 50px; font-size: 0.8em; color: #7f8c8d; }}
        </style>
    </head>
    <body>
        <h1>Relat√≥rio de Previs√µes Macroecon√¥micas</h1>
        <h2>{indicator_names.get(indicator, indicator.upper())}</h2>
        <p>Data de gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
        
        <div class="container">
            <h3>Resumo dos Dados Hist√≥ricos</h3>
            <table>
                <tr>
                    <th>M√©trica</th>
                    <th>Valor</th>
                </tr>
                <tr>
                    <td>Per√≠odo</td>
                    <td>{historical.index.min().strftime('%d/%m/%Y')} a {historical.index.max().strftime('%d/%m/%Y')}</td>
                </tr>
                <tr>
                    <td>N√∫mero de observa√ß√µes</td>
                    <td>{len(historical)}</td>
                </tr>
                <tr>
                    <td>Valor m√≠nimo</td>
                    <td>{historical[indicator].min():.4f}</td>
                </tr>
                <tr>
                    <td>Valor m√°ximo</td>
                    <td>{historical[indicator].max():.4f}</td>
                </tr>
                <tr>
                    <td>M√©dia</td>
                    <td>{historical[indicator].mean():.4f}</td>
                </tr>
                <tr>
                    <td>Mediana</td>
                    <td>{historical[indicator].median():.4f}</td>
                </tr>
                <tr>
                    <td>Desvio padr√£o</td>
                    <td>{historical[indicator].std():.4f}</td>
                </tr>
            </table>
        </div>
        
        <div class="container">
            <h3>Previs√µes</h3>
            <p>Horizonte de previs√£o: {len(forecast)} meses</p>
            <p>Per√≠odo: {forecast.index.min().strftime('%d/%m/%Y')} a {forecast.index.max().strftime('%d/%m/%Y')}</p>
            
            <h4>Modelos utilizados:</h4>
            <ul>
    """
    
    # Adicionar modelos selecionados
    for model in selected_models:
        if model in forecast.columns:
            html_content += f"<li>{model_names.get(model, model)}</li>\n"
    
    html_content += """
            </ul>
            
            <h4>Tabela de previs√µes:</h4>
            <table>
                <tr>
                    <th>Data</th>
    """
    
    # Adicionar cabe√ßalhos para cada modelo
    for model in selected_models:
        if model in forecast.columns:
            html_content += f"<th>{model_names.get(model, model)}</th>\n"
    
    html_content += """
                </tr>
    """
    
    # Adicionar linhas da tabela
    for date, row in forecast.iterrows():
        html_content += f"""
                <tr>
                    <td>{date.strftime('%d/%m/%Y')}</td>
        """
        
        for model in selected_models:
            if model in forecast.columns:
                html_content += f"<td>{row[model]:.4f}</td>\n"
        
        html_content += """
                </tr>
        """
    
    html_content += """
            </table>
        </div>
        
        <div class="container">
            <h3>An√°lise e Conclus√µes</h3>
            <p>
                Este relat√≥rio apresenta as previs√µes para o indicador macroecon√¥mico selecionado,
                utilizando diferentes modelos estat√≠sticos e de machine learning. As previs√µes s√£o
                baseadas em dados hist√≥ricos e podem ser utilizadas como refer√™ncia para tomada de
                decis√µes, mas est√£o sujeitas a incertezas e fatores externos n√£o capturados pelos modelos.
            </p>
            <p>
                Recomenda-se acompanhar regularmente as atualiza√ß√µes dos dados e revis√µes das previs√µes,
                bem como considerar outros fatores econ√¥micos, pol√≠ticos e sociais que possam impactar
                o comportamento futuro do indicador.
            </p>
        </div>
        
        <div class="footer">
            <p>Dashboard de Previs√µes Macroecon√¥micas do Brasil</p>
            <p>Gerado automaticamente em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
        </div>
    </body>
    </html>
    """
    
    # Salvar arquivo HTML
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return filename

# Interface principal do dashboard
def main():
    # T√≠tulo e descri√ß√£o
    st.title("Dashboard de Previs√µes Macroecon√¥micas do Brasil")
    st.markdown("""
    Este dashboard apresenta dados hist√≥ricos e previs√µes para os principais indicadores 
    macroecon√¥micos do Brasil: IPCA (infla√ß√£o), Taxa Selic, PIB e c√¢mbio (USD/BRL).
    
    As previs√µes s√£o geradas utilizando diferentes modelos estat√≠sticos e de machine learning,
    com horizonte de 12 meses.
    """)
    
    # Carregar dados
    with st.spinner("Carregando dados..."):
        data = load_data()
        metrics = load_model_metrics()
    
    # Barra lateral
    st.sidebar.title("Configura√ß√µes")
    
    # Sele√ß√£o de indicador
    indicator = st.sidebar.selectbox(
        "Selecione o indicador:",
        options=['ipca', 'selic', 'pib', 'cambio'],
        format_func=lambda x: {
            'ipca': 'IPCA (Infla√ß√£o)',
            'selic': 'Taxa Selic',
            'pib': 'PIB',
            'cambio': 'C√¢mbio (USD/BRL)'
        }.get(x, x.upper())
    )
    
    # Sele√ß√£o de modelos
    available_models = ['arima', 'prophet', 'rf', 'xgb', 'ensemble']
    selected_models = st.sidebar.multiselect(
        "Selecione os modelos:",
        options=available_models,
        default=['ensemble'],
        format_func=lambda x: {
            'arima': 'ARIMA',
            'prophet': 'Prophet',
            'rf': 'Random Forest',
            'xgb': 'XGBoost',
            'ensemble': 'Ensemble (m√©dia)'
        }.get(x, x)
    )
    
    # Op√ß√£o de intervalo de confian√ßa
    show_ci = st.sidebar.checkbox("Mostrar intervalo de confian√ßa", value=True)
    
    # Horizonte de previs√£o
    if data[indicator]['forecast'] is not None:
        max_horizon = len(data[indicator]['forecast'])
        horizon = st.sidebar.slider(
            "Horizonte de previs√£o (meses):",
            min_value=1,
            max_value=max_horizon,
            value=max_horizon
        )
    else:
        horizon = 12
    
    # Exporta√ß√£o de dados
    st.sidebar.subheader("Exportar Dados")
    export_format = st.sidebar.radio("Formato:", options=['CSV', 'Excel'])
    
    if st.sidebar.button("Exportar Dados"):
        with st.spinner("Exportando dados..."):
            filename = export_data(data, indicator, format=export_format.lower())
            st.sidebar.success(f"Dados exportados para {filename}")
    
    # Gera√ß√£o de relat√≥rio
    st.sidebar.subheader("Gerar Relat√≥rio")
    
    if st.sidebar.button("Gerar Relat√≥rio"):
        with st.spinner("Gerando relat√≥rio..."):
            filename = generate_report(data, indicator, selected_models)
            st.sidebar.success(f"Relat√≥rio gerado: {filename}")
    
    # Conte√∫do principal
    if indicator in data and data[indicator]['historical'] is not None:
        # Dividir em abas
        tab1, tab2, tab3 = st.tabs(["Visualiza√ß√£o", "M√©tricas", "Dados"])
        
        with tab1:
            # Gr√°fico principal
            if data[indicator]['forecast'] is not None:
                # Limitar horizonte de previs√£o
                forecast_limited = data[indicator]['forecast'].iloc[:horizon].copy()
                data_for_plot = {
                    indicator: {
                        'historical': data[indicator]['historical'],
                        'forecast': forecast_limited
                    }
                }
                
                fig = plot_forecast(data_for_plot, indicator, models=selected_models, confidence_interval=show_ci)
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.error("Dados de previs√£o n√£o dispon√≠veis para este indicador.")
        
        with tab2:
            # Tabela de m√©tricas
            st.subheader("M√©tricas de Avalia√ß√£o dos Modelos")
            metrics_table = create_metrics_table(metrics, indicator)
            
            if metrics_table is not None:
                st.dataframe(metrics_table, use_container_width=True)
                
                # Explica√ß√£o das m√©tricas
                with st.expander("Explica√ß√£o das m√©tricas"):
                    st.markdown("""
                    - **RMSE (Root Mean Square Error)**: Raiz do erro quadr√°tico m√©dio. Quanto menor, melhor.
                    - **MAE (Mean Absolute Error)**: Erro absoluto m√©dio. Quanto menor, melhor.
                    - **R¬≤ (Coeficiente de determina√ß√£o)**: Indica quanto da vari√¢ncia dos dados √© explicada pelo modelo. Quanto mais pr√≥ximo de 1, melhor.
                    """)
            else:
                st.info("M√©tricas n√£o dispon√≠veis para este indicador.")
        
        with tab3:
            # Dados hist√≥ricos e previs√µes
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Dados Hist√≥ricos")
                st.dataframe(data[indicator]['historical'], use_container_width=True)
            
            with col2:
                st.subheader("Previs√µes")
                if data[indicator]['forecast'] is not None:
                    st.dataframe(data[indicator]['forecast'], use_container_width=True)
                else:
                    st.info("Previs√µes n√£o dispon√≠veis.")
    else:
        st.error("Dados n√£o dispon√≠veis para o indicador selecionado.")
    
    # Rodap√©
    st.markdown("---")
    st.markdown("""
    **Dashboard de Previs√µes Macroecon√¥micas do Brasil**
    
    Desenvolvido com Streamlit, Python e modelos de s√©ries temporais.
    
    Dados atualizados semanalmente a partir de fontes oficiais (BACEN e IBGE).
    """)

if __name__ == "__main__":
    main()
